这样利用策略模式已经解决了多种打折的问题，但是你有没有发现策略只是实现了在不同打折方法或不同算法行为之间得灵活切换，
并没有控制实例化哪一个算法，需要用哪一个优惠方式是由客户端决定的，所以客户端与具体的实现类之间耦合性很大，还需要进一步解耦。
          策略模式更注重于n选1的情况，这也就是说如果我想组合几种不同的打折策略，策略就会显得不恰当，因为你需要将多个打折方法都写到一个类里面去，为解决这种情况，可以配合装饰(Decorator)模式一起使用。
           装饰模式适合给一个类添加额外的职责，并且对客户端透明。
           我们来看一张表示装饰模式的图，这张图即表明了它的添加功能特性也它的透明性。