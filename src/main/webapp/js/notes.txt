定义函数。
Function.prototype.method= function(name,func){
      this.protype[name]=func;
	  return this;
};

if (response.product && response.product.img)
{
            //get img...
 }
 
 var a={}, b={};  //引用不同对象
 var a=b={};         //引用同一对象
 
 
 //对象的属性 ，和 对象原型链中的属性。。。
 
 
 // inherit() returns a newly created object that inherits properties from the
// prototype object p.  It uses the ECMAScript 5 function Object.create() if
// it is defined, and otherwise falls back to an older technique.
function inherit(p) {
    if (p == null) throw TypeError(); // p must be a non-null object
    if (Object.create)                // If Object.create() is defined...
        return Object.create(p);      //    then just use it.
    var t = typeof p;                 // Otherwise do some more type checking
    if (t !== "object" && t !== "function") throw TypeError();
    function f() {};                  // Define a dummy constructor function.
    f.prototype = p;                  // Set its prototype property to p.
    return new f();                   // Use f() to create an "heir" of p.
}

//创建一个使用原对象，作为其原型的新对象。。
if(typeof Object.beget!=='function')
{
     Object.beget=function(o){
		 var F=function(){};
		 F.prototype=o;
		 return new F();
	 };
}
Function.method('new',function(){
//创建一个新对象，他继承自构造函数的原型对象
var that=Object.beget(this.prototype);
//调用构造函数，绑定 this 到新对象上。
var other=this.apply(that,arguments);
//如果他返回值不是一个对象，就返回该新对象
return (thpeof other === 'object' && other)||that;

});


用构成函数的坏处：
如果构造器调用忘记了加 new 前缀，那么this 将不会绑定到新对象上， this 将会被绑定到全局对象。不但没有扩充新对象，反而破坏了全局对象。。


对象的三个属性 --》 
1.原型 ，
 2.class  那些自定义的对象都是Object...
 function classof(o) {
    if (o === null) return "Null";
    if (o === undefined) return "Undefined";
    return Object.prototype.toString.call(o).slice(8,-1);
}
 3.可扩展性  包含内置属性 和自定义属性。。  （非扩展配置 函数  Object.preventExtensions() , Object.seal() Object.freeze() ）
 
 JSON.stringfy(jsonOjbect)
 JSON.parse(string);

push()  数组尾添加
unshift() 数组头部添加
delete 不修改length,,留下空白，形成稀疏数组
pop 返回尾部  ， length -1
shift() 返回头部 length-1
for in 不要直接枚举 数组 因为它还会枚举继承的属性
可以用forEach

Array.join(“,”) 将元素转为字符串并连接
Stirng.split(",")
Array.reverse() 逆向排序
Array.sort()  undefined 会被排在最后
[1,3].concat(4,5)  [1,3,4,5]
[1,3,4,5].slice(0,3) [1,3,4]
splice()  将数组拆出来  [1,2,3,4]  splice(1,2) 返回[2,3] 原来的数组 = [1,4]

forEach(func(v,i,a))， 使用三个参数调用该传入函数 ，数组元素，index, 数组本身   。。foreach 没有break
a=[1,2,3]  b=a.map(function(x) {return x*x;});   //b= [1,4,9]
a.filter(function(x){return x<3;}); 
a.every(function(x) {return x<10})  //  如果全部小于10 reutn true ,else return false;
a.some() ...

reduce()  reduceRight()  使用指定函数将元素组合，生成单个值。 函数式编程称为 注入 和折叠
var a=[1,2,3,4,5]
var sum=a.reduce(function(x,y){return x+y},0);   传入 函数的参数  1=累计值 ，2=元素  3=index 4=数组本身 
var max=a.reduce(function(x,y){return (x>y)?x:y;});


  











var eventuality=function (that){
       var registry={};
	   that.fire=function(event){
	   /*
	   在一个对象上触发一个事件，该事件可以是一个包含事件名称的字符串，
	   或者是一个拥有包含事件名称的type 属性对象，
	   通过 on 方法注册的事件处理程序中匹配事件名称的函数将被调用
	   */
			var arry, func,handler,i
			,type=(type of event ==='string')?event:event.type;
		//如果这个事件存在一组事件处理程序，那么历遍他们并按顺序执行	
			if(registry.hasOwnProperty(type)){
				array=registry[type];
				for(i=0;i<array.length;i+=1){
					handler=array[i];
					//每个处理程序包含一个方法和一组可选的参数。 如果该方法是一个字符串形式的名字，那么找到该函数。
					func=handler.method;
					if(typeof func==='string'){
						func=this[func];
					}
			//调用一个处理程序，如果该条目包含参数，那么传递他们过去，否则，传递该事件对象。		
					func.apply(this,handler.parameters||[event]);
				}
			}
			return this;
	   };
	   that.on=function (type,method,parameters){
	   //注册一个事件，构造一条处理程序条目，将它插入到处理程序数组中。如果这种类型的事件还不存在，就构造一个。
			var handler={
				method:method,
				parameters:parameters
			};
			if(registry.hasOwnproperty(type)){
				registry[type].push(handler);
			}else{
				registry[type]=[handler];
			}
			return this;
	   };
	   return that;
};

我们可以在任何单独的对象上调用eventuality ..授予他时间处理方法。。

eventuality(that);


var eventuality = function(that){
	var registry = {};
	that.fire = function(event){
		// 触发通过 'on' 方法注册的事件处理程序。该事件可以是一个包含事件名称的字符串,
		// 或是一个拥有type属性的对象.
		var array,func,handler,i,type = typeof event === 'string' ? event : event.type;

		if(registry.hasOwnProperty(type)){
			array = registry[type];
			for(i = 0 ; i < array.length ; i++){
				handler = array[i];

				func = handler.method;
				// 每个处理程序包含一个方法和一组可选的参数.
				// 如果该方法是一个字符串形式的名字，那么就查找该函数.
				if(typeof func === 'string'){
					func = this[func];
				}
							
				// 调用处理程序。如果该条目包含参数，那么传递它们过去.否则，传递该事件对象。
				func.apply(this, handler.parameters || [event]);
			}
		}
		return this;
	};

	// 注册一个事件
	that.on = function(type, method ,parameters){
		var handler = {
			method : method,
			parameters : parameters
		};
		if(registry.hasOwnProperty(type)){
			registry[type].push(handler);
		}else{
			registry[type] = [handler];
		}
		return this;
	};

	return that;
};

